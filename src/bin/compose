#!/bin/bash

if docker compose version >/dev/null 2>&1; then
  DOCKER_COMPOSE="docker compose"
elif docker-compose version >/dev/null 2>&1; then
  DOCKER_COMPOSE="docker-compose"
else
  echo "Ошибка: Docker Compose не установлен." >&2
  exit 1
fi

docker_path="./vendor/beeralex/compose/src/_docker"
output_file="./docker-compose.yml"
partials_path="./vendor/beeralex/compose/src/partials"
install_node="N"
install_sphinx="N"
site_path="./"
export USERGROUP=${USERGROUP:-$(id -g)}

install() {
  set_site_path
  choose_php_version
  choose_mysql_version
  choose_node_js
  choose_sphinx
  create_docker_compose
}

set_site_path() {
  read -p "Введите путь до директории сайта (site или пустая строка - текущая директория): " site_path
  if [ ${#site_path} -eq 0 ]; then
    site_path="./"
  else
    if [[ "${site_path}" != ./* ]]; then
      site_path="./${site_path}"
    fi
    if [[ "${site_path}" != */ ]]; then
      site_path="${site_path}/"
    fi
    if [ ! -d "$site_path" ]; then
      mkdir -p "$site_path"
    fi
  fi
}

choose_php_version() {
  echo "Выберите версию PHP:"
  echo "1) PHP 7.4"
  echo "2) PHP 8.2"
  echo "3) PHP 8.3"
  echo "4) PHP 8.4"
  read -p "Введите номер версии: " php_version_choice
  case $php_version_choice in
    1)
      php_version="7.4"
      ;;
    2)
      php_version="8.2"
      ;;
    3)
      php_version="8.3"
      ;;
    4)
      php_version="8.4"
      ;;
    *)
      echo "Неправильный выбор. Попробуйте снова."
      choose_php_version
      ;;
  esac
}

choose_mysql_version() {
  echo "Выберите версию MySQL:"
  echo "1) MySQL 5.7"
  echo "2) MySQL 8.0"
  read -p "Введите номер версии (1 или 2): " mysql_version_choice
  case $mysql_version_choice in
    1)
      mysql_version="5.7"
      ;;
    2)
      mysql_version="8.0"
      ;;
    *)
      echo "Неправильный выбор. Попробуйте снова."
      choose_mysql_version
      ;;
  esac
}

choose_node_js() {
  read -p "Устанавливать ли node js? (Y или N): " available_node_js
  case $available_node_js in
    Y)
      install_node=Y
      echo "Введите путь до директории с package.json относительно директории сайта"
      read -p "например (local/js/vite или пустая строка): " path_node_root
      if [ ! -z "$path_node_root" ]; then
        if [[ "${path_node_root}" = /* ]]; then
          path_node_root="${path_node_root#/}"
        fi
        if [ ! -d "$site_path$path_node_root" ]; then
          echo "Директория /var/www/$path_node_root не существует. Создаю..."
          mkdir -p "$site_path$path_node_root"
          echo "Директория создана."
        fi
      fi
      ;;
    N)
      ;;
    *)
      echo "Неправильный выбор. Попробуйте снова."
      choose_node_js
      ;;
  esac
}

choose_sphinx() {
  read -p "Устанавливать ли sphinx? (Y или N): " available_sphinx
  case $available_sphinx in
    Y)
      install_sphinx=Y
      ;;
    N)
      ;;
    *)
      echo "Неправильный выбор. Попробуйте снова."
      choose_sphinx
      ;;
  esac
}

create_docker_compose() {
  echo "services:" >> $output_file

  sed "s|\${docker_path}|${docker_path}|g; s|\${site_path}|${site_path}|g" \
    "${partials_path}/nginx.stub" >> $output_file
  echo "" >> $output_file

  sed "s|\${docker_path}|${docker_path}|g; s|\${php_version}|${php_version}|g; s|\${site_path}|${site_path}|g" \
    "${partials_path}/php.stub" >> $output_file
  echo "" >> $output_file

  sed "s|\${docker_path}|${docker_path}|g; s|\${mysql_version}|${mysql_version}|g; s|\${site_path}|${site_path}|g" \
    "${partials_path}/mysql.stub" >> $output_file

  if [ "$install_node" = "Y" ]; then
    echo "" >> $output_file
    sed "s|\${docker_path}|${docker_path}|g; s|\${path_node_root}|${path_node_root}|g; s|\${site_path}|${site_path}|g" \
      "${partials_path}/node.stub" >> $output_file
  fi

  if [ "$install_sphinx" = "Y" ]; then
    echo "" >> $output_file
    sed "s|\${docker_path}|${docker_path}|g" \
      "${partials_path}/sphinx.stub" >> $output_file
  fi

  echo "" >> $output_file
  echo "networks:" >> $output_file
  echo "  compose:" >> $output_file
  echo "    driver: bridge" >> $output_file
  echo "volumes:" >> $output_file
  echo "  mysql_data:" >> $output_file
  if [ "$install_sphinx" = "Y" ]; then
    echo "  sphinx_data:" >> $output_file
  fi
  echo "#sshsecrets:" >> $output_file
  echo "#ssh  host_ssh_key:" >> $output_file
  echo "#ssh    file: ~/.ssh/file.ppk" >> $output_file

  echo "docker-compose.yml создан."
}

publish_docker_files() {
  if [ -d "./_docker" ]; then
    echo "Директория ./_docker уже существует. Удаляем..."
    rm -rf ./_docker
  fi

  echo "Переносим ${docker_path} в ./_docker..."
  cp -r "${docker_path}" ${site_path}_docker

  if [ -f "$output_file" ]; then
    echo "Файл $output_file уже существует. Обновляем путь..."
    sed -i "s|${docker_path}|./_docker|g" "$output_file"
    echo "Путь в $output_file обновлен на ${site_path}_docker."
  else
    docker_path="./_docker"
    echo "Файл $output_file не найден. Генерируем новый файл."
    install
  fi
}

case $1 in
  install)
    echo "Запускаем установку..."
    install
    ;;
  publish)
    echo "Запускаем публикацию Docker конфигураций..."
    publish_docker_files
    ;;
  php)
    $DOCKER_COMPOSE exec -it --user appuser app $@
    ;;
  composer)
    $DOCKER_COMPOSE exec -it --user appuser app $@
    ;;
  npm)
    $DOCKER_COMPOSE exec -it --user nodeuser node "$@"
    ;;
  npx)
    $DOCKER_COMPOSE exec -it --user nodeuser node "$@"
    ;;
  pm2)
    $DOCKER_COMPOSE exec -it --user root node "$@"
    ;;
  share)
    shift
    docker_cmd="docker run --init --rm -p "4040":4040 -t beyondcodegmbh/expose-server:latest share http://host.docker.internal:80"
    while [[ "$#" -gt 0 ]]; do
      case $1 in
          --auth) auth="$2"; shift ;;
          --server) server="$2"; shift ;;
          --subdomain) subdomain="$2"; shift ;;
          --domain) domain="$2"; shift ;;
          --server-host) server_host="$2"; shift ;;
          --server-port) server_port="$2"; shift ;;
          *) echo "Unknown parameter passed: $1"; exit 1 ;;
      esac
      shift
    done
    docker_cmd+=" --auth=\"${auth:-e17105f7-e499-470a-bd5b-05c0a579036f}\""
    [ -n "$server_host" ] && docker_cmd+=" --server-host=\"$server_host\""
    [ -n "$server_port" ] && docker_cmd+=" --server-port=\"$server_port\""
    [ -n "$server" ] && docker_cmd+=" --server=\"$server\""
    [ -n "$subdomain" ] && docker_cmd+=" --subdomain=\"$subdomain\""
    [ -n "$domain" ] && docker_cmd+=" --domain=\"$domain\""
    eval $docker_cmd
    ;;
  *)
    $DOCKER_COMPOSE "$@"
    ;;
esac
