#!/bin/bash

if docker compose version >/dev/null 2>&1; then
  DOCKER_COMPOSE="docker compose"
elif docker-compose version >/dev/null 2>&1; then
  DOCKER_COMPOSE="docker-compose"
else
  echo "Ошибка: Docker Compose не установлен." >&2
  exit 1
fi

HOSTS_PUSH="$(dirname "$0")/hosts_push"

docker_path="./vendor/beeralex/compose/src/_docker"
config_path="./config.json"
hosts_path="./hosts"
output_file="./docker-compose.yml"
partials_path="./vendor/beeralex/compose/src/partials"
install_node="N"
install_sphinx="N"
site_path="./"
domain_name=""
is_new_site=false
export USERGROUP=${USERGROUP:-$(id -g)}

install() {
  set_site_path
  choose_php_version
  choose_mysql_version
  choose_node_js
  choose_sphinx
  create_docker_compose
}

create_site() {
  if [ -f "./config.json" ]; then
    is_new_site=true
    load_config_json
    set_docker_path
    set_domain_name
    push_to_local_hosts
    mkdir -p "${site_path}${domain_name}"
    create_certs
    $HOSTS_PUSH
  else
    create_default_config
  fi
}

set_docker_path(){
  if [ -d "./_docker" ]; then
    docker_path="./_docker"
  fi
}

set_site_path() {
  read -p "Введите путь до директории сайта (site или пустая строка - текущая директория): " site_path
  if [ ${#site_path} -eq 0 ]; then
    site_path="./"
  else
    if [[ "${site_path}" != ./* ]]; then
      site_path="./${site_path}"
    fi
    if [[ "${site_path}" != */ ]]; then
      site_path="${site_path}/"
    fi
    if [ ! -d "$site_path" ]; then
      mkdir -p "$site_path"
    fi
  fi
}

choose_php_version() {
  echo "Выберите версию PHP:"
  echo "1) PHP 7.4"
  echo "2) PHP 8.2"
  echo "3) PHP 8.3"
  echo "4) PHP 8.4"
  read -p "Введите номер версии: " php_version_choice
  case $php_version_choice in
    1)
      php_version="7.4"
      ;;
    2)
      php_version="8.2"
      ;;
    3)
      php_version="8.3"
      ;;
    4)
      php_version="8.4"
      ;;
    *)
      echo "Неправильный выбор. Попробуйте снова."
      choose_php_version
      ;;
  esac
}

choose_mysql_version() {
  echo "Выберите версию MySQL:"
  echo "1) MySQL 5.7"
  echo "2) MySQL 8.0"
  read -p "Введите номер версии (1 или 2): " mysql_version_choice
  case $mysql_version_choice in
    1)
      mysql_version="5.7"
      ;;
    2)
      mysql_version="8.0"
      ;;
    *)
      echo "Неправильный выбор. Попробуйте снова."
      choose_mysql_version
      ;;
  esac
}

choose_node_js() {
  read -p "Устанавливать ли node js? (Y или N): " available_node_js
  case $available_node_js in
    Y)
      install_node=Y
      echo "Введите путь до директории с package.json относительно директории сайта"
      read -p "например (local/js/vite или пустая строка): " path_node_root
      if [ ! -z "$path_node_root" ]; then
        if [[ "${path_node_root}" = /* ]]; then
          path_node_root="${path_node_root#/}"
        fi
        if [ ! -d "$site_path$path_node_root" ]; then
          echo "Директория /var/www/$path_node_root не существует. Создаю..."
          mkdir -p "$site_path$path_node_root"
          echo "Директория создана."
        fi
      fi
      ;;
    N)
      ;;
    *)
      echo "Неправильный выбор. Попробуйте снова."
      choose_node_js
      ;;
  esac
}

choose_sphinx() {
  read -p "Устанавливать ли sphinx? (Y или N): " available_sphinx
  case $available_sphinx in
    Y)
      install_sphinx=Y
      ;;
    N)
      ;;
    *)
      echo "Неправильный выбор. Попробуйте снова."
      choose_sphinx
      ;;
  esac
}

create_docker_compose() {
  echo "services:" >> $output_file

  sed "s|\${docker_path}|${docker_path}|g; s|\${site_path}|${site_path}|g" \
    "${partials_path}/nginx.stub" >> $output_file
  echo "" >> $output_file

  sed "s|\${docker_path}|${docker_path}|g; s|\${php_version}|${php_version}|g; s|\${site_path}|${site_path}|g" \
    "${partials_path}/php.stub" >> $output_file
  echo "" >> $output_file

  sed "s|\${docker_path}|${docker_path}|g; s|\${mysql_version}|${mysql_version}|g; s|\${site_path}|${site_path}|g" \
    "${partials_path}/mysql.stub" >> $output_file

  if [ "$install_node" = "Y" ]; then
    echo "" >> $output_file
    sed "s|\${docker_path}|${docker_path}|g; s|\${path_node_root}|${path_node_root}|g; s|\${site_path}|${site_path}|g" \
      "${partials_path}/node.stub" >> $output_file
  fi

  if [ "$install_sphinx" = "Y" ]; then
    echo "" >> $output_file
    sed "s|\${docker_path}|${docker_path}|g" \
      "${partials_path}/sphinx.stub" >> $output_file
  fi

  echo "" >> $output_file
  echo "networks:" >> $output_file
  echo "  compose:" >> $output_file
  echo "    driver: bridge" >> $output_file
  echo "volumes:" >> $output_file
  echo "  mysql_data:" >> $output_file
  if [ "$install_sphinx" = "Y" ]; then
    echo "  sphinx_data:" >> $output_file
  fi
  echo "#sshsecrets:" >> $output_file
  echo "#ssh  host_ssh_key:" >> $output_file
  echo "#ssh    file: ~/.ssh/file.ppk" >> $output_file

  echo "docker-compose.yml создан."
  save_config_json
}

publish_docker_files() {
  if [ -d "./_docker" ]; then
    echo "Директория ./_docker уже существует. Удаляем..."
    rm -rf ./_docker
  fi

  echo "Переносим ${docker_path} в ./_docker..."
  cp -r "${docker_path}" ${site_path}_docker

  if [ -f "$output_file" ]; then
    echo "Файл $output_file уже существует. Обновляем путь..."
    sed -i "s|${docker_path}|./_docker|g" "$output_file"
    echo "Путь в $output_file обновлен на ${site_path}_docker."
  else
    docker_path="./_docker"
    echo "Файл $output_file не найден. Генерируем новый файл."
    install
  fi
}

save_config_json() {
  local stub_file="${partials_path}/config.stub"
  sed "s|\${site_path}|${site_path}|g" "$stub_file" > $config_path
}

create_default_config() {
  set_site_path
  save_config_json
}

load_config_json() {
  site_path=$(grep '"site_path"' "$config_path" | sed -E 's/.*"site_path": *"(.*)".*/\1/')
}

set_domain_name() {
  read -p "Введите название сайта (доменное имя) " domain_name
  if [ ${#domain_name} -eq 0 ]; then
    echo "Вы ввели пустое значение, попробуйте снова"
    set_domain_name
  fi
}

create_certs() {
  local root_crt="$docker_path/nginx/certs/rootCA.crt"
  local root_key="$docker_path/nginx/certs/rootCA.key"
  
  local domain_key="$docker_path/nginx/certs/${domain_name}/$domain_name.key"
  local domain_csr="$docker_path/nginx/certs/${domain_name}/$domain_name.csr"
  local domain_ext="$docker_path/nginx/certs/${domain_name}/$domain_name.ext"
  local domain_crt="$docker_path/nginx/certs/${domain_name}/$domain_name.crt"

  local nginx_key="$docker_path/nginx/certs/${domain_name}/nginx.key"
  local nginx_csr="$docker_path/nginx/certs/${domain_name}/nginx.csr"
  local nginx_ext="$docker_path/nginx/certs/${domain_name}/nginx.ext"
  local nginx_crt="$docker_path/nginx/certs/${domain_name}/nginx.crt"

  local nginx_conf="$docker_path/nginx/conf.d/$domain_name.conf"
  local nginx_app_conf="$docker_path/app/nginx/$domain_name.conf"
  local nginx_part_conf="$docker_path/nginx/conf.d/snippets/$domain_name.conf"

  local nginx_root_path="/var/www"
  if [ "$is_new_site" = true ]; then
    nginx_root_path="/var/www/$domain_name"
  fi

  local stub_domain_certs_file="${partials_path}/certs_domain_conf.stub"
  local stub_nginx_certs_file="${partials_path}/certs_nginx_conf.stub"
  local stub_nginx_file="${partials_path}/nginx_conf.stub"
  local stub_nginx_part_file="${partials_path}/nginx_part_conf.stub"
  local stub_nginx_app_file="${partials_path}/nginx_app_conf.stub"

  mkdir -p "$docker_path/nginx/certs/${domain_name}"

  sed "s|\${domain}|${domain_name}|g" "$stub_domain_certs_file" > $domain_ext
  sed "s|\${domain}|${domain_name}|g" "$stub_nginx_certs_file" > $nginx_ext
  sed "s|\${domain}|${domain_name}|g; s|\${root_path}|${nginx_root_path}|g" "$stub_nginx_part_file" > "$nginx_part_conf"
  sed "s|\${domain}|${domain_name}|g" "$stub_nginx_file" > $nginx_conf
  sed "s|\${domain}|${domain_name}|g" "$stub_nginx_app_file" > $nginx_app_conf

  openssl genrsa -out $nginx_key 2048
  openssl req -new -key $nginx_key -out $nginx_csr -subj "/C=RU/ST=Omsk Oblast/L=Omsk/O=company/CN=nginx"
  openssl x509 -req -in $nginx_csr -CA $root_crt -CAkey $root_key -CAcreateserial -out $nginx_crt -days 9999 -sha256 -extfile $nginx_ext

  openssl genrsa -out $domain_key 2048
  openssl req -new -key $domain_key -out $domain_csr -subj "/C=RU/ST=Omsk Oblast/L=Omsk/O=company/CN=$domain_name"
  openssl x509 -req -in $domain_csr -CA $root_crt -CAkey $root_key -CAcreateserial -out $domain_crt -days 9999 -sha256 -extfile $domain_ext
}

push_to_local_hosts() {
  echo "127.0.0.1 $domain_name" >> "$hosts_path"
}

case $1 in
  install)
    echo "Запускаем установку..."
    install
    ;;
  publish)
    echo "Запускаем публикацию Docker конфигураций..."
    publish_docker_files
    ;;
  create)
    if [ "$2" == "site" ]; then
      create_site
    elif [ "$2" == "domain" ]; then
      set_docker_path
      set_domain_name
      push_to_local_hosts
      create_certs 
      $HOSTS_PUSH
    else
      echo "Неверная команда для create!"
    fi
    ;;
  hosts)
    if [ "$2" == "push" ]; then
      $HOSTS_PUSH
    else
      echo "Неверная команда для hosts!"
    fi
    ;;
  php)
    $DOCKER_COMPOSE exec -it --user appuser app $@
    ;;
  composer)
    $DOCKER_COMPOSE exec -it --user appuser app $@
    ;;
  npm)
    $DOCKER_COMPOSE exec -it --user nodeuser node "$@"
    ;;
  npx)
    $DOCKER_COMPOSE exec -it --user nodeuser node "$@"
    ;;
  pm2)
    $DOCKER_COMPOSE exec -it --user root node "$@"
    ;;
  share)
    shift
    docker_cmd="docker run --init --rm -p "4040":4040 -t beyondcodegmbh/expose-server:latest share http://host.docker.internal:80"
    while [[ "$#" -gt 0 ]]; do
      case $1 in
          --auth) auth="$2"; shift ;;
          --server) server="$2"; shift ;;
          --subdomain) subdomain="$2"; shift ;;
          --domain) domain="$2"; shift ;;
          --server-host) server_host="$2"; shift ;;
          --server-port) server_port="$2"; shift ;;
          *) echo "Unknown parameter passed: $1"; exit 1 ;;
      esac
      shift
    done
    docker_cmd+=" --auth=\"${auth:-e17105f7-e499-470a-bd5b-05c0a579036f}\""
    [ -n "$server_host" ] && docker_cmd+=" --server-host=\"$server_host\""
    [ -n "$server_port" ] && docker_cmd+=" --server-port=\"$server_port\""
    [ -n "$server" ] && docker_cmd+=" --server=\"$server\""
    [ -n "$subdomain" ] && docker_cmd+=" --subdomain=\"$subdomain\""
    [ -n "$domain" ] && docker_cmd+=" --domain=\"$domain\""
    eval $docker_cmd
    ;;
  *)
    $DOCKER_COMPOSE "$@"
    ;;
esac
